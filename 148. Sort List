/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next==null){
            return head;
        }
        ListNode mid = getmid(head);
        ListNode left =sortList(head);
        ListNode right = sortList(mid);
        return merge(left,right);
    }


    public ListNode getmid(ListNode head){
        ListNode fast,slow,midPrev;
        fast = head;
        slow = head;
        midPrev = slow;
        while(fast != null && fast.next !=null){
            midPrev =slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        midPrev.next = null;
        return slow;
    }

    public ListNode merge(ListNode list1,ListNode list2){
        ListNode dummy = new ListNode();
        ListNode tail =dummy;
        while(list1!=null && list2!= null){
            if(list1.val<list2.val){
                tail.next = list1;
                list1 = list1.next;
            }
            else{
                tail.next = list2;
                list2 = list2.next;

            }
            tail = tail.next;

        }

        if (list1!= null){
            tail.next = list1;
         }
        if(list2!=null){
            tail.next = list2;
        }
        return dummy.next;
    }
}
class TrieNode{
    public HashMap<Character, TrieNode> children;
    public boolean endofWord;
    public TrieNode(){
        this.children = new HashMap<Character,TrieNode>();
        this.endofWord = false;
    }

}

class Trie {
    public TrieNode root;
    public Trie() {
        this.root = new TrieNode();        
    }
    
    public void insert(String word) {
        TrieNode cur = this.root;
        for(char c : word.toCharArray()){
            if(!cur.children.containsKey(c)){
                cur.children.put(c, new TrieNode());
            }
            cur = cur.children.get(c);
        }
        cur.endofWord = true;
    }
    
    public boolean search(String word) {
        TrieNode cur = this.root;
        for(char c : word.toCharArray()){
             if(!cur.children.containsKey(c)){
               return false;
            }
            cur = cur.children.get(c);
        }
        return cur.endofWord;
    }
    
    public boolean startsWith(String prefix) {
        TrieNode cur = this.root;
        for(char c : prefix.toCharArray()){
             if(!cur.children.containsKey(c)){
               return false;
            }
            cur = cur.children.get(c);
        }
        return true;
    }
        
    }


/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
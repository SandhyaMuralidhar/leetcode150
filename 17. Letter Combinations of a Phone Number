class Solution {

    private List<String> combinations = new ArrayList<String>();
    private String input_digits;
 private Map<Character, String> letters = Map.of(
        '2', "abc", '3', "def", '4', "ghi", '5', "jkl", 
        '6', "mno", '7', "pqrs", '8', "tuv", '9', "wxyz");
    public List<String> letterCombinations(String digits) {
        if(digits.length()==0)
            return combinations;
        input_digits = digits;
        backtrack(new StringBuilder(),0);
        return combinations;
    }

    private void backtrack(StringBuilder path, int index){
        if (path.length() == input_digits.length()){
            combinations.add(path.toString());
            return;
        }

        String lets = letters.get(input_digits.charAt(index));
        for(char c : lets.toCharArray()){
            path.append(c);
            backtrack(path,index+1);
            path.deleteCharAt(path.length()-1);

        }
    }
}